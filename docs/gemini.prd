
**선정된 기술 스택:** `Vue 3` + `TypeScript` + `Vite` + `Pinia` + `PrimeVue`

---

### ## ⚙️ Phase 0: 프로젝트 설정 및 환경 구축 (1~3일)

프로젝트의 뼈대를 만드는 첫 단계입니다.

1.  **Vue 3 프로젝트 생성**
    * `Vite`를 사용하여 `Vue 3` + `TypeScript` 템플릿으로 프로젝트를 초기화합니다.
2.  **핵심 라이브러리 설치**
    * UI 라이브러리: `primevue`, `primeicons`
    * 상태 관리: `pinia`
    * 라우팅: `vue-router`
3.  **PrimeVue 설정**
    * `main.ts` 파일에 PrimeVue 플러그인과 기본 CSS, 테마를 설정합니다.
4.  **프로젝트 구조 설계**
    * `src/` 폴더 내에 기본 디렉터리를 생성합니다: `components`, `views` (또는 `pages`), `router`, `store`, `services`, `assets`.
5.  **Supabase 연동**
    * `supabase-js` 라이브러리를 설치합니다.
    * Supabase 클라이언트 인스턴스를 생성하는 모듈(`services/supabase.ts`)을 만듭니다.
    * `.env` 파일을 생성하여 Supabase URL과 API 키를 안전하게 관리합니다.
6.  **기본 라우팅 설정**
    * `router/index.ts` 파일에 랜딩페이지, 로그인, 회원가입 등 초기 경로를 설정합니다.

---

### ## 👤 Phase 1: 핵심 인증 및 사용자 기반 구축 (1~2주)

사용자가 시스템을 이용할 수 있게 하는 가장 기초적인 기능입니다.

1.  **Supabase 데이터베이스 테이블 설계**
    * `profiles`: Supabase의 `auth.users` 테이블과 연동될 사용자 정보 테이블. `id`, `nickname`, `role` (`Superuser`, `Manager`, `Employee`), `status` (`pending`, `active`) 등의 컬럼을 포함합니다.
2.  **회원가입 및 로그인 UI 개발**
    * `views/Signup.vue`, `views/Login.vue` 페이지를 만듭니다.
    * PrimeVue의 `InputText`, `Password`, `Button` 컴포넌트를 활용하여 폼을 구성합니다.
3.  **인증 로직 구현**
    * 이메일/비밀번호, Google, Kakao 기반 회원가입 및 로그인 기능을 `supabase-js`를 이용해 구현합니다.
    * 회원가입 시 `profiles` 테이블에 `pending` 상태로 사용자 정보를 저장합니다.
4.  **상태 관리 (Pinia)**
    * `store/authStore.ts`를 생성하여 로그인 상태, 사용자 프로필, 역할(Role) 정보를 전역으로 관리합니다.
5.  **경로 접근 제어 (Routing Guard)**
    * `vue-router`의 `beforeEach`를 사용하여 로그인하지 않은 사용자는 대시보드에 접근할 수 없도록 하고, 역할(Role)에 따라 접근 가능한 페이지를 제어하는 로직을 추가합니다.

---

### ## 🏢 Phase 2: 조직 및 근무지 관리 기능 (2~3주)

Manager가 스케줄링을 준비하기 위한 기본 정보를 설정하는 기능입니다.

1.  **Supabase 데이터베이스 테이블 설계**
    * `organizations`: 근무지 정보 (`name`, `type`, `shift_info` 등).
    * `sites`: 조직 내 하위 사이트 정보 (`org_id`, `name`).
    * `skills`: 조직에 필요한 기술/전문 분야 (`org_id`, `skill_name`).
    * `user_org_relations`: 사용자와 조직을 연결하는 테이블.
2.  **회원가입 플로우 확장**
    * 역할(Role)에 따라 회원가입 폼을 다르게 표시합니다.
    * **Manager**: 조직 정보를 직접 입력받습니다.
    * **Employee**: 기존에 생성된 조직 목록을 `Dropdown`으로 선택하게 합니다.
3.  **조직 관리 페이지 개발 (`views/admin/OrganizationAdmin.vue`)**
    * Manager 이상만 접근 가능한 페이지를 만듭니다. PrimeVue의 `TabView`를 사용하여 하위 메뉴를 구분합니다.
    * **사용자 관리 탭:**
        * `pending` 상태의 Employee 가입 요청 목록을 **PrimeVue `DataTable`**로 표시합니다.
        * '승인' 버튼 클릭 시 해당 사용자의 상태를 `active`로 변경하는 기능을 구현합니다.
    * **근무지 정보 탭:** 가입 시 입력한 근무지 이름, 근무 유형 등을 조회하고 수정하는 폼을 만듭니다.
    * **보유 기술/사이트 관리 탭:** 조직에 필요한 기술과 하위 사이트를 등록(CRUD)하는 기능을 `DataTable`과 `Dialog`를 활용해 구현합니다.

---

### ## 🗓️ Phase 3: 스케줄링 핵심 기능 개발 (3~4주)

프로젝트의 가장 핵심적인 스케줄링 인터페이스를 개발합니다.

1.  **Supabase 데이터베이스 테이블 설계**
    * `shift_preferences`: 근무자의 선호/비선호 날짜 정보 (`user_id`, `date`, `preference_type`, `credit_used`).
    * `daily_requirements`: 일별, 사이트별 필요 인력 정보 (`site_id`, `date`, `skill_id`, `required_count`).
2.  **근무자 선호도 등록 페이지 (`views/schedule/MyPreference.vue`)**
    * Employee가 접근하는 페이지입니다.
    * **PrimeVue `Calendar`** 컴포넌트를 사용하여 본인의 근무 불가능/선호 날짜를 선택하고 저장하는 기능을 구현합니다.
    * 크레딧 시스템을 연동하여 연차 외 비선호 날짜 선택 시 크레딧을 차감하는 로직을 추가합니다.
3.  **메인 스케줄 캘린더 UI 개발 (`views/schedule/Scheduler.vue`)**
    * **PrimeVue `Timeline` 컴포넌트**를 적극 활용하여 스케줄을 시각화합니다.
    * `TabView`를 사용하여 'By Employee'와 'By Site' 뷰를 전환할 수 있게 만듭니다.
        * **By Employee 뷰:** 세로축은 직원 목록, 가로축은 날짜. 각 직원의 배정된 근무(Shift)를 표시합니다.
        * **By Site 뷰:** 세로축은 사이트 목록, 가로축은 날짜. 일별 필요 인력 대비 실제 배정된 인력 현황을 표시합니다.
4.  **일별 필요 인력 설정 기능**
    * Manager가 스케줄링 기간 동안 사이트별/일별 필요 기술과 인원수를 설정하는 UI를 구현합니다. (예: `DataTable`의 In-cell Editing 기능 활용)

---

### ## 🤖 Phase 4: AI 스케줄러 연동 및 수동 조정 (2주)

자동화의 핵심인 AI Solver 연동 파트입니다.

1.  **AI Solver API 연동**
    * `services/solverService.ts` 파일을 생성합니다.
    * 스케줄링에 필요한 모든 데이터(직원, 기술, 선호도, 필요 인력 등)를 취합하여 AI Solver가 요구하는 JSON 포맷으로 만드는 함수를 작성합니다.
    * Google Cloud Run으로 배포된 AI Solver 엔드포인트에 `POST` 요청을 보내는 함수를 구현합니다.
2.  **자동 스케줄링 실행 UI**
    * 스케줄 캘린더 페이지에 '자동 스케줄링 실행' 버튼을 추가합니다.
    * 버튼 클릭 시 로딩 상태를 표시하고, 위에서 만든 서비스 함수를 호출합니다.
    * AI Solver로부터 스케줄 결과를 받으면, Pinia 스토어를 업데이트하여 `Timeline` 뷰에 즉시 반영되도록 합니다.
3.  **수동 조정 기능**
    * `Timeline` 뷰에서 배정된 근무를 드래그 앤 드롭하거나 클릭하여 다른 근무자와 교환하는 기능을 구현합니다.
    * 수동 변경 시, '필수 인력 부족'과 같은 제약 조건 위반을 감지하고 **PrimeVue `Toast`**나 `ConfirmDialog`로 경고 메시지를 띄웁니다.

---

### ## 📊 Phase 5 & 6: 대시보드, 배포 및 마무리 (2~3주)

프로젝트의 완성도를 높이고 실제 사용을 준비하는 단계입니다.

1.  **대시보드 및 리포트 개발**
    * 개인/팀의 근무 통계를 시각화하는 대시보드를 **PrimeVue `Chart`** 컴포넌트를 이용해 구현합니다.
    * 생성된 스케줄을 Excel/CSV로 내보내는 기능을 추가합니다.
2.  **최종 테스트**
    * 단위(Unit) 및 통합(Integration) 테스트를 진행합니다.
    * 주요 기능에 대한 사용자 시나리오 테스트를 수행합니다.
3.  **배포 (Deployment)**
    * Vercel, Netlify 등 정적 사이트 호스팅 플랫폼에 Frontend 프로젝트를 배포합니다.
    * CI/CD 파이프라인을 구축하여 코드 변경 시 자동으로 빌드 및 배포가 이루어지도록 설정합니다.
4.  **문서화 및 인수인계**
    * 프로젝트 설정 방법, 주요 코드 구조 등에 대한 간단한 문서를 작성합니다.